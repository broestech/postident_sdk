name: Publish to maven
on:
  push:
    tags:
      - '*'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - uses: burrunan/gradle-cache-action@v1
        name: Cache .gradle
      - name: Test
        run: |
          ./gradlew test

  push-internally:
    runs-on: ubuntu-latest
    needs: test
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - name: Set tags env
        run: echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Gradle publish internally
        run: | 
          export CODEARTIFACT_AUTH_TOKEN=`aws codeartifact get-authorization-token --domain broeskamp --domain-owner 843115942280 --region eu-central-1 --query authorizationToken --output text`
          ./gradlew -Pversion=${{ env.RELEASE_VERSION }} publishMavenJavaPublicationToInternalRepository -i


  push-publicly:
    runs-on: ubuntu-latest
    needs: test
    env:
      OSSRH_USERNAME: ${{ secrets.OSSRH_USERNAME }}
      OSSRH_PASSWORD: ${{ secrets.OSSRH_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
        name: Checkout
      - name: Set tags env
        run: echo "RELEASE_VERSION=${GITHUB_REF##*/}" >> $GITHUB_ENV
      - name: Install GPG secret key
        run: |
          cat <(echo -e "${{ secrets.OSSRH_GPG_SECRET_PGP_KEY }}") | gpg --batch --import
          gpg --list-secret-keys --keyid-format LONG
      - name: Gradle publish publicly
        run: |
          ./gradlew \
            -Pversion=${{ env.RELEASE_VERSION }} \
            -Psigning.password="${{ secrets.OSSRH_GPG_SECRET_PGP_KEY_PASSWORD }}" \
            publishMavenJavaPublicationToMavenCentralRepository -i